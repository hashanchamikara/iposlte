/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.isimple.intelijpos_lite.ui.barcode;

import com.isimple.intelijpos_lite.controller.ItemManager;
import com.isimple.intelijpos_lite.controller.ReportManager;
import com.isimple.intelijpos_lite.models.Item;
import com.isimple.intelijpos_lite.models.Stock;
import com.isimple.intelijpos_lite.ui.main.UIHome;
import com.isimple.intelijpos_lite.util.Utilities;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.MenuKeyListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dumidu
 */
public class UIBarcode extends javax.swing.JPanel {

    private final UIHome mHome;
    private final Map<String, BarcodeItem> ITEMS;

    /**
     * Creates new form UIBarcode
     *
     * @param mHome
     */
    public UIBarcode(UIHome mHome) {
        initComponents();
        this.mHome = mHome;
        jPopupMenu1.setLightWeightPopupEnabled(true);
        jPopupMenu2.setLightWeightPopupEnabled(true);
        ITEMS = new HashMap();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mBarcode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mItem = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        mQty = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        mPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Item", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel1.setText("Barcodes");

        jLabel2.setText("Code");

        mBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mBarcodeKeyReleased(evt);
            }
        });

        jLabel3.setText("Item");

        mItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mItemKeyReleased(evt);
            }
        });

        jButton1.setText("add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Qty");

        mPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mPriceKeyReleased(evt);
            }
        });

        jLabel5.setText("Price");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(mItem))
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(mQty, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(mPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(mPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(mItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Preview");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mBarcodeKeyReleased
        findItemByBarcode(evt);
    }//GEN-LAST:event_mBarcodeKeyReleased

    private void mItemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mItemKeyReleased
        findItem(evt);
    }//GEN-LAST:event_mItemKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addItem();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        preview();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mPriceKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_mPriceKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        printBarcode();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField mBarcode;
    private javax.swing.JTextField mItem;
    private javax.swing.JTextField mPrice;
    private javax.swing.JSpinner mQty;
    // End of variables declaration//GEN-END:variables

    private void findItem(java.awt.event.KeyEvent evt) {
        if (KeyEvent.VK_UP != evt.getKeyCode() && KeyEvent.VK_DOWN != evt.getKeyCode()
                && KeyEvent.VK_ENTER != evt.getKeyCode()) {
            if (!mItem.getText().isEmpty()) {
                jPopupMenu1.removeAll();
                List<Item> items = ItemManager.getInstance().searchItemName(mItem.getText());
                for (Item item : items) {
                    JMenuItem menuItem = jPopupMenu1.add(item.getBarcode() + " | " + item.getName());
                    menuItem.addActionListener((ActionEvent e) -> {
                        mItem.setText(item.getName());
                        mBarcode.setText(item.getBarcode());
                        List<Stock> stocks = ItemManager.getInstance().getStocks(item);
                        if (!stocks.isEmpty()) {
                            Stock stock = stocks.get(stocks.size() - 1);
                            mPrice.setText(String.valueOf(stock.getRprice()));
                        }
                    });
                    menuItem.addMenuKeyListener(new MenuKeyListener() {

                        @Override
                        public void menuKeyTyped(MenuKeyEvent e) {

                        }

                        @Override
                        public void menuKeyPressed(MenuKeyEvent e) {
                        }

                        @Override
                        public void menuKeyReleased(MenuKeyEvent e) {
                            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                                mItem.setText(item.getName());
                                mBarcode.setText(item.getBarcode());
                                List<Stock> stocks = ItemManager.getInstance().getStocks(item);
                                if (!stocks.isEmpty()) {
                                    Stock stock = stocks.get(stocks.size() - 1);
                                    mPrice.setText(String.valueOf(stock.getRprice()));
                                }
                                jPopupMenu1.setVisible(false);
                            }
                        }
                    });
                }
                jPopupMenu1.show(mItem, 0, 20);
                jPopupMenu1.pack();
                mItem.requestFocus();
            }
        } else {
            jPopupMenu1.requestFocus();
        }
    }

    private void findItemByBarcode(KeyEvent evt) {
        if (KeyEvent.VK_UP != evt.getKeyCode() && KeyEvent.VK_DOWN != evt.getKeyCode()
                && KeyEvent.VK_ENTER != evt.getKeyCode()) {
            if (!mBarcode.getText().isEmpty()) {
                jPopupMenu1.removeAll();
                List<Item> items = ItemManager.getInstance().searchItemBarcode(mBarcode.getText());
                for (Item item : items) {
                    JMenuItem menuItem = jPopupMenu1.add(item.getBarcode() + " | " + item.getName());
                    menuItem.addActionListener((ActionEvent e) -> {
                        mItem.setText(item.getName());
                        mBarcode.setText(item.getBarcode());
                        List<Stock> stocks = ItemManager.getInstance().getStocks(item);
                        if (!stocks.isEmpty()) {
                            Stock stock = stocks.get(stocks.size() - 1);
                            mPrice.setText(String.valueOf(stock.getRprice()));
                        }
                    });
                    menuItem.addMenuKeyListener(new MenuKeyListener() {

                        @Override
                        public void menuKeyTyped(MenuKeyEvent e) {

                        }

                        @Override
                        public void menuKeyPressed(MenuKeyEvent e) {
                        }

                        @Override
                        public void menuKeyReleased(MenuKeyEvent e) {
                            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                                mItem.setText(item.getName());
                                mBarcode.setText(item.getBarcode());
                                List<Stock> stocks = ItemManager.getInstance().getStocks(item);
                                if (!stocks.isEmpty()) {
                                    Stock stock = stocks.get(stocks.size() - 1);
                                    mPrice.setText(String.valueOf(stock.getRprice()));
                                }
                                jPopupMenu1.setVisible(false);
                            }
                        }
                    });
                }
                jPopupMenu1.show(mBarcode, 0, 20);
                jPopupMenu1.pack();
                mBarcode.requestFocus();
            }
        } else {
            jPopupMenu1.requestFocus();
        }
    }

    private void addItem() {
        if (!mBarcode.getText().isEmpty() && !mItem.getText().isEmpty() && Integer.parseInt(mQty.getValue().toString()) > 0) {
            ITEMS.put(mBarcode.getText(), new BarcodeItem(mBarcode.getText(),
                    mItem.getText(), Integer.parseInt(mQty.getValue().toString()),
                    Double.parseDouble(mPrice.getText())));
            refreshTable();
        }
    }

    private void refreshTable() {
        Utilities.clear(jTable1);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        ITEMS.values().stream().map((value) -> {
            Object[] os = new Object[4];
            os[0] = value.barcode;
            os[1] = value.item;
            os[2] = value.qty;
            os[3] = value.price;
            return os;
        }).forEach((os) -> {
            model.addRow(os);
        });
    }

    private void preview() {
        try {
            ReportManager.getInstance().previewBarcode(ITEMS.values());
        } catch (Exception ex) {
            Logger.getLogger(UIBarcode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printBarcode() {
        try {
            ReportManager.getInstance().printBarcode(ITEMS.values());
        } catch (Exception ex) {
            Logger.getLogger(UIBarcode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    static public class BarcodeItem {

        public final String barcode;
        public final String item;
        public final int qty;
        public final double price;

        public BarcodeItem(String barcode, String item, int qty, double price) {
            this.barcode = barcode;
            this.item = item;
            this.qty = qty;
            this.price = price;
        }

    }
}
